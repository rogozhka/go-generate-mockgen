// Code generated by MockGen. DO NOT EDIT.
// Source: required_time_operations.go
//
// Generated by this command:
//
//	mockgen -source=required_time_operations.go -destination=mocks/required_time_operations_generated.go -mock_names timeOperations=MockTimeOperations -typed -package=mocks timeOperations
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTimeOperations is a mock of timeOperations interface.
type MockTimeOperations struct {
	ctrl     *gomock.Controller
	recorder *MockTimeOperationsMockRecorder
	isgomock struct{}
}

// MockTimeOperationsMockRecorder is the mock recorder for MockTimeOperations.
type MockTimeOperationsMockRecorder struct {
	mock *MockTimeOperations
}

// NewMockTimeOperations creates a new mock instance.
func NewMockTimeOperations(ctrl *gomock.Controller) *MockTimeOperations {
	mock := &MockTimeOperations{ctrl: ctrl}
	mock.recorder = &MockTimeOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeOperations) EXPECT() *MockTimeOperationsMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeOperations) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeOperationsMockRecorder) Now() *MockTimeOperationsNowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeOperations)(nil).Now))
	return &MockTimeOperationsNowCall{Call: call}
}

// MockTimeOperationsNowCall wrap *gomock.Call
type MockTimeOperationsNowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTimeOperationsNowCall) Return(arg0 time.Time) *MockTimeOperationsNowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTimeOperationsNowCall) Do(f func() time.Time) *MockTimeOperationsNowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTimeOperationsNowCall) DoAndReturn(f func() time.Time) *MockTimeOperationsNowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Since mocks base method.
func (m *MockTimeOperations) Since(arg0 time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Since", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since.
func (mr *MockTimeOperationsMockRecorder) Since(arg0 any) *MockTimeOperationsSinceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockTimeOperations)(nil).Since), arg0)
	return &MockTimeOperationsSinceCall{Call: call}
}

// MockTimeOperationsSinceCall wrap *gomock.Call
type MockTimeOperationsSinceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTimeOperationsSinceCall) Return(arg0 time.Duration) *MockTimeOperationsSinceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTimeOperationsSinceCall) Do(f func(time.Time) time.Duration) *MockTimeOperationsSinceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTimeOperationsSinceCall) DoAndReturn(f func(time.Time) time.Duration) *MockTimeOperationsSinceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
