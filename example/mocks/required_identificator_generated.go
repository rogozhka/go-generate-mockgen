// Code generated by MockGen. DO NOT EDIT.
// Source: required_identificator.go
//
// Generated by this command:
//
//	mockgen -source=required_identificator.go -destination=mocks/required_identificator_generated.go -mock_names uniqueIdentificatorGenerator=MockUniqueIdentificatorGenerator -typed -package=mocks uniqueIdentificatorGenerator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUniqueIdentificatorGenerator is a mock of uniqueIdentificatorGenerator interface.
type MockUniqueIdentificatorGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUniqueIdentificatorGeneratorMockRecorder
}

// MockUniqueIdentificatorGeneratorMockRecorder is the mock recorder for MockUniqueIdentificatorGenerator.
type MockUniqueIdentificatorGeneratorMockRecorder struct {
	mock *MockUniqueIdentificatorGenerator
}

// NewMockUniqueIdentificatorGenerator creates a new mock instance.
func NewMockUniqueIdentificatorGenerator(ctrl *gomock.Controller) *MockUniqueIdentificatorGenerator {
	mock := &MockUniqueIdentificatorGenerator{ctrl: ctrl}
	mock.recorder = &MockUniqueIdentificatorGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUniqueIdentificatorGenerator) EXPECT() *MockUniqueIdentificatorGeneratorMockRecorder {
	return m.recorder
}

// GenerateID mocks base method.
func (m *MockUniqueIdentificatorGenerator) GenerateID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateID indicates an expected call of GenerateID.
func (mr *MockUniqueIdentificatorGeneratorMockRecorder) GenerateID() *MockUniqueIdentificatorGeneratorGenerateIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateID", reflect.TypeOf((*MockUniqueIdentificatorGenerator)(nil).GenerateID))
	return &MockUniqueIdentificatorGeneratorGenerateIDCall{Call: call}
}

// MockUniqueIdentificatorGeneratorGenerateIDCall wrap *gomock.Call
type MockUniqueIdentificatorGeneratorGenerateIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUniqueIdentificatorGeneratorGenerateIDCall) Return(arg0 string, arg1 error) *MockUniqueIdentificatorGeneratorGenerateIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUniqueIdentificatorGeneratorGenerateIDCall) Do(f func() (string, error)) *MockUniqueIdentificatorGeneratorGenerateIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUniqueIdentificatorGeneratorGenerateIDCall) DoAndReturn(f func() (string, error)) *MockUniqueIdentificatorGeneratorGenerateIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
