// Code generated by MockGen. DO NOT EDIT.
// Source: required_file_operations.go
//
// Generated by this command:
//
//	mockgen -source=required_file_operations.go -destination=mocks/required_file_operations_generated.go -mock_names fileOperations=MockFileOperations -typed -package=mocks fileOperations
//

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileOperations is a mock of fileOperations interface.
type MockFileOperations struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperationsMockRecorder
	isgomock struct{}
}

// MockFileOperationsMockRecorder is the mock recorder for MockFileOperations.
type MockFileOperationsMockRecorder struct {
	mock *MockFileOperations
}

// NewMockFileOperations creates a new mock instance.
func NewMockFileOperations(ctrl *gomock.Controller) *MockFileOperations {
	mock := &MockFileOperations{ctrl: ctrl}
	mock.recorder = &MockFileOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperations) EXPECT() *MockFileOperationsMockRecorder {
	return m.recorder
}

// MkdirAll mocks base method.
func (m *MockFileOperations) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileOperationsMockRecorder) MkdirAll(path, perm any) *MockFileOperationsMkdirAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileOperations)(nil).MkdirAll), path, perm)
	return &MockFileOperationsMkdirAllCall{Call: call}
}

// MockFileOperationsMkdirAllCall wrap *gomock.Call
type MockFileOperationsMkdirAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOperationsMkdirAllCall) Return(arg0 error) *MockFileOperationsMkdirAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOperationsMkdirAllCall) Do(f func(string, os.FileMode) error) *MockFileOperationsMkdirAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOperationsMkdirAllCall) DoAndReturn(f func(string, os.FileMode) error) *MockFileOperationsMkdirAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockFileOperations) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileOperationsMockRecorder) Remove(path any) *MockFileOperationsRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileOperations)(nil).Remove), path)
	return &MockFileOperationsRemoveCall{Call: call}
}

// MockFileOperationsRemoveCall wrap *gomock.Call
type MockFileOperationsRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOperationsRemoveCall) Return(arg0 error) *MockFileOperationsRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOperationsRemoveCall) Do(f func(string) error) *MockFileOperationsRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOperationsRemoveCall) DoAndReturn(f func(string) error) *MockFileOperationsRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAll mocks base method.
func (m *MockFileOperations) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileOperationsMockRecorder) RemoveAll(path any) *MockFileOperationsRemoveAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileOperations)(nil).RemoveAll), path)
	return &MockFileOperationsRemoveAllCall{Call: call}
}

// MockFileOperationsRemoveAllCall wrap *gomock.Call
type MockFileOperationsRemoveAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOperationsRemoveAllCall) Return(arg0 error) *MockFileOperationsRemoveAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOperationsRemoveAllCall) Do(f func(string) error) *MockFileOperationsRemoveAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOperationsRemoveAllCall) DoAndReturn(f func(string) error) *MockFileOperationsRemoveAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stat mocks base method.
func (m *MockFileOperations) Stat(path string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", path)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileOperationsMockRecorder) Stat(path any) *MockFileOperationsStatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileOperations)(nil).Stat), path)
	return &MockFileOperationsStatCall{Call: call}
}

// MockFileOperationsStatCall wrap *gomock.Call
type MockFileOperationsStatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOperationsStatCall) Return(arg0 os.FileInfo, arg1 error) *MockFileOperationsStatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOperationsStatCall) Do(f func(string) (os.FileInfo, error)) *MockFileOperationsStatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOperationsStatCall) DoAndReturn(f func(string) (os.FileInfo, error)) *MockFileOperationsStatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
